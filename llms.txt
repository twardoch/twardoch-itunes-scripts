Project Structure:
üìÅ twardoch-itunes-scripts
‚îú‚îÄ‚îÄ üìÑ AUTHORS
‚îú‚îÄ‚îÄ üìÑ CHANGELOG.md
‚îú‚îÄ‚îÄ üìÑ CONTRIBUTORS
‚îú‚îÄ‚îÄ üìÑ LICENSE
‚îú‚îÄ‚îÄ üìÑ PLAN.md
‚îú‚îÄ‚îÄ üìÑ README.md
‚îú‚îÄ‚îÄ üìÑ TODO.md
‚îú‚îÄ‚îÄ üìÑ twardoch_autorate_itunes_tracks_using_audioscrobbler.py
‚îî‚îÄ‚îÄ üìÑ twardoch_exportimport_itunes_ratings_as_popm.py


<documents>
<document index="1">
<source>AUTHORS</source>
<document_content>
# This is the official list of twardoch-itunes-scripts authors for copyright purposes.
# This file is distinct from the CONTRIBUTORS files.
# See the latter for an explanation.

# Names should be added to this file as:
# Name or Organization <email address>
# The email address is not required for organizations.

Adam Twardoch <adam@twardoch.com>

</document_content>
</document>

<document index="2">
<source>CHANGELOG.md</source>
<document_content>
# Changelog

All notable changes to this project will be documented in this file.

## [Unreleased] - 2025-01-29

### Recent Changes
- Auto-commit: Save local changes (5ccf87b)
- Fix implementation (e9a659a) 
- Initial commit of iTunes scripts (52272fa)
- Initial repository setup (04cbd04)

### Current State
- Repository contains two Python scripts for iTunes library management:
  - `twardoch_autorate_itunes_tracks_using_audioscrobbler.py` - Automatically rates iTunes tracks based on Audioscrobbler (Last.fm) popularity data
  - `twardoch_exportimport_itunes_ratings_as_popm.py` - Exports/imports iTunes ratings to/from MP3 files using POPM ID3 tags
- Scripts were written in 2006 and use outdated Python patterns and libraries
- Windows support via COM automation, partial Mac OS X support via appscript
- No dependency management, testing, or modern packaging
- Apache License 2.0

### Known Issues
- Scripts may not work with modern iTunes/Music app versions
- Audioscrobbler API endpoints are likely deprecated
- Dependencies on unmaintained libraries (win32com, appscript)
- No Python 3 compatibility guarantees
- No error handling or logging
- Platform-specific code without proper abstraction
</document_content>
</document>

<document index="3">
<source>CONTRIBUTORS</source>
<document_content>
# This is the official list of people who can contribute
# (and typically have contributed) code to this repository.
# The AUTHORS file lists the copyright holders; this file
# lists people. 
# Names should be added to this file like so:
#     Name <email address>

Adam Twardoch <adam@twardoch.com>

</document_content>
</document>

<document index="4">
<source>LICENSE</source>
<document_content>
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "{}"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright {yyyy} {name of copyright owner}

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.


</document_content>
</document>

<document index="5">
<source>PLAN.md</source>
<document_content>
# Improvement Plan for twardoch-itunes-scripts

## Executive Summary

This repository contains two Python scripts from 2006 that interact with iTunes libraries. The scripts are outdated and need comprehensive modernization to work with current systems and follow modern Python best practices. This plan outlines a complete overhaul to transform these scripts into a maintainable, installable Python package.

## Current State Analysis

### Technical Debt
1. **Python Version**: Written for Python 2.x, needs Python 3 compatibility
2. **Dependencies**: Uses deprecated/unmaintained libraries (win32com, appscript, old mutagen API)
3. **API Integration**: Audioscrobbler API is deprecated (now Last.fm with different endpoints)
4. **Platform Support**: Windows-centric with incomplete Mac support, no Linux support
5. **Code Quality**: No type hints, inconsistent naming, minimal error handling
6. **Project Structure**: Flat structure with no modularity
7. **Distribution**: No packaging, dependency management, or installation process

### Functional Issues
1. iTunes COM interface may not work with modern Music app
2. Audioscrobbler endpoints no longer exist
3. ID3 tag handling may conflict with modern music players
4. No configuration options or CLI interface
5. Hardcoded values throughout the code

## Modernization Strategy

### Phase 1: Foundation and Structure (Week 1)

#### 1.1 Project Restructuring
Create a proper Python package structure:
```
twardoch-itunes-scripts/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îî‚îÄ‚îÄ itunes_tools/
‚îÇ       ‚îú‚îÄ‚îÄ __init__.py
‚îÇ       ‚îú‚îÄ‚îÄ __main__.py          # CLI entry point
‚îÇ       ‚îú‚îÄ‚îÄ config.py            # Configuration management
‚îÇ       ‚îú‚îÄ‚îÄ models.py            # Data models
‚îÇ       ‚îú‚îÄ‚îÄ platforms/           # Platform-specific implementations
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ base.py         # Abstract base class
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ windows.py      # Windows implementation
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ macos.py        # macOS implementation
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ linux.py        # Linux stub/alternative
‚îÇ       ‚îú‚îÄ‚îÄ services/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ itunes.py       # iTunes/Music app interface
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ lastfm.py       # Last.fm API client
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ id3.py          # ID3 tag handling
‚îÇ       ‚îú‚îÄ‚îÄ commands/            # CLI commands
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ autorate.py
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ sync_ratings.py
‚îÇ       ‚îî‚îÄ‚îÄ utils/
‚îÇ           ‚îú‚îÄ‚îÄ __init__.py
‚îÇ           ‚îú‚îÄ‚îÄ logging.py
‚îÇ           ‚îî‚îÄ‚îÄ progress.py
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ unit/
‚îÇ   ‚îú‚îÄ‚îÄ integration/
‚îÇ   ‚îî‚îÄ‚îÄ fixtures/
‚îú‚îÄ‚îÄ docs/
‚îÇ   ‚îú‚îÄ‚îÄ index.md
‚îÇ   ‚îú‚îÄ‚îÄ installation.md
‚îÇ   ‚îú‚îÄ‚îÄ usage.md
‚îÇ   ‚îî‚îÄ‚îÄ api.md
‚îú‚îÄ‚îÄ .github/
‚îÇ   ‚îî‚îÄ‚îÄ workflows/
‚îÇ       ‚îú‚îÄ‚îÄ test.yml
‚îÇ       ‚îî‚îÄ‚îÄ release.yml
‚îú‚îÄ‚îÄ pyproject.toml
‚îú‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ requirements-dev.txt
‚îú‚îÄ‚îÄ setup.cfg
‚îú‚îÄ‚îÄ tox.ini
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ .pre-commit-config.yaml
‚îî‚îÄ‚îÄ Makefile
```

#### 1.2 Development Environment Setup
1. Create `pyproject.toml` with modern Python packaging standards
2. Set up virtual environment management with poetry or pip-tools
3. Configure pre-commit hooks for code quality
4. Set up tox for multi-version testing
5. Configure GitHub Actions for CI/CD

#### 1.3 Code Quality Tools
- **Linting**: ruff, pylint
- **Formatting**: black, isort
- **Type Checking**: mypy with strict mode
- **Security**: bandit, safety
- **Documentation**: Sphinx with autodoc
- **Testing**: pytest with coverage

### Phase 2: Core Refactoring (Week 2-3)

#### 2.1 Platform Abstraction Layer
Create an abstract base class for iTunes/Music app interaction:
```python
from abc import ABC, abstractmethod
from typing import List, Optional, Dict, Any

class MusicLibraryInterface(ABC):
    @abstractmethod
    def connect(self) -> bool:
        """Establish connection to music library"""
        
    @abstractmethod
    def get_tracks(self) -> List[Track]:
        """Retrieve all tracks from library"""
        
    @abstractmethod
    def update_rating(self, track_id: str, rating: int) -> bool:
        """Update track rating"""
```

Implement platform-specific versions:
- Windows: Use pywin32 or comtypes for COM automation
- macOS: Investigate Music.app AppleScript or use py-applescript
- Linux: Provide alternative using local file scanning

#### 2.2 Modern API Integration
Replace Audioscrobbler with Last.fm API v2:
1. Implement OAuth2 authentication flow
2. Create async API client using httpx
3. Add rate limiting and retry logic
4. Cache API responses to reduce calls
5. Handle API errors gracefully

#### 2.3 ID3 Tag Handling
Update mutagen integration:
1. Use latest mutagen API
2. Support multiple audio formats (MP3, M4A, FLAC)
3. Preserve existing tags when updating
4. Add validation for tag values
5. Implement batch operations for performance

### Phase 3: Feature Enhancement (Week 4)

#### 3.1 Configuration System
Implement hierarchical configuration:
1. Command-line arguments (highest priority)
2. Environment variables
3. User config file (~/.config/itunes-tools/config.yaml)
4. System defaults

Configuration options:
- Last.fm API credentials
- Rating scale mapping
- File type filters
- Logging levels
- Progress display options

#### 3.2 CLI Interface
Create intuitive CLI using Click or Typer:
```bash
# Auto-rate tracks
itunes-tools autorate --artist "Pink Floyd" --min-popularity 0.7

# Sync ratings bidirectionally
itunes-tools sync-ratings --direction both --format popm

# Export library metadata
itunes-tools export --format json --output library.json

# Show statistics
itunes-tools stats --group-by artist
```

#### 3.3 Advanced Features
1. **Playlist Management**: Create playlists based on ratings
2. **Bulk Operations**: Process specific artists/albums/playlists
3. **Dry Run Mode**: Preview changes before applying
4. **Backup/Restore**: Save and restore rating snapshots
5. **Web Interface**: Optional Flask/FastAPI web UI

### Phase 4: Testing and Documentation (Week 5)

#### 4.1 Testing Strategy
1. **Unit Tests**: 
   - Test each module in isolation
   - Mock external dependencies
   - Aim for >80% coverage

2. **Integration Tests**:
   - Test platform-specific implementations
   - Test Last.fm API integration
   - Test ID3 tag operations

3. **End-to-End Tests**:
   - Test complete workflows
   - Use test fixtures with sample music files
   - Test error scenarios

#### 4.2 Documentation
1. **User Documentation**:
   - Installation guide for each platform
   - Quick start tutorial
   - Command reference
   - Troubleshooting guide

2. **Developer Documentation**:
   - Architecture overview
   - API reference
   - Contributing guidelines
   - Plugin development guide

3. **Examples**:
   - Common use cases
   - Automation scripts
   - Integration examples

### Phase 5: Distribution and Deployment (Week 6)

#### 5.1 Packaging
1. Build wheel and sdist packages
2. Create platform-specific installers:
   - Windows: MSI installer or portable exe
   - macOS: Homebrew formula
   - Linux: Snap/Flatpak/AppImage

#### 5.2 Release Process
1. Semantic versioning (follow SemVer)
2. Automated releases via GitHub Actions
3. Publish to PyPI
4. Generate release notes from commits
5. Create GitHub releases with binaries

#### 5.3 Community Building
1. Create issue templates
2. Set up discussions forum
3. Write contribution guidelines
4. Create code of conduct
5. Set up project website

## Migration Path for Existing Users

### Compatibility Mode
Provide a compatibility layer that:
1. Accepts old command-line arguments
2. Translates old config formats
3. Provides migration warnings
4. Offers automated migration tools

### Data Migration
1. Detect existing POPM tags
2. Offer to backup current ratings
3. Provide rollback mechanism
4. Generate migration report

## Performance Optimizations

1. **Concurrent Processing**: Use asyncio for API calls
2. **Batch Operations**: Process files in chunks
3. **Caching**: Cache API responses and file metadata
4. **Progress Indicators**: Provide real-time feedback
5. **Memory Management**: Stream large libraries

## Security Considerations

1. **API Credentials**: Use secure storage (keyring)
2. **File Permissions**: Respect OS file permissions
3. **Input Validation**: Sanitize all user inputs
4. **Dependency Scanning**: Regular security audits
5. **Privacy**: Don't log sensitive information

## Maintenance Plan

1. **Regular Updates**:
   - Monthly dependency updates
   - Quarterly feature releases
   - Security patches as needed

2. **Monitoring**:
   - Error tracking with Sentry
   - Usage analytics (opt-in)
   - Performance metrics

3. **Community Engagement**:
   - Respond to issues within 48 hours
   - Monthly development updates
   - Quarterly roadmap reviews

## Success Metrics

1. **Code Quality**: 
   - Test coverage > 80%
   - No critical security issues
   - Type coverage > 90%

2. **User Adoption**:
   - 100+ GitHub stars
   - 1000+ PyPI downloads/month
   - Active community contributions

3. **Performance**:
   - Process 10k tracks < 1 minute
   - API response caching > 90% hit rate
   - Memory usage < 100MB for typical library

## Risk Mitigation

1. **Platform Changes**: Abstract platform-specific code
2. **API Deprecation**: Support multiple API versions
3. **Library Updates**: Pin dependencies, test updates
4. **User Data Loss**: Always backup before modifications
5. **Performance Issues**: Profile and optimize bottlenecks

## Conclusion

This comprehensive modernization plan will transform the outdated iTunes scripts into a professional, maintainable Python package. The phased approach ensures steady progress while maintaining stability. The focus on testing, documentation, and community building will ensure long-term sustainability of the project.
</document_content>
</document>

<document index="6">
<source>README.md</source>
<document_content>
# twardoch-itunes-scripts

**twardoch-itunes-scripts** is a collection of Python scripts designed to enhance your iTunes experience by automating track ratings and managing rating data between your iTunes library and your MP3 files. These scripts were originally developed by Adam Twardoch (circa 2006) and are aimed at music enthusiasts and iTunes users looking for more control over their music library.

**Note from the Original Author (paraphrased):** _"I have no idea whether these scripts still work. Feel free to modify them or clean them up, and request a pull merge."_ This highlights the age of the scripts and the potential need for updates for compatibility with modern systems.

## Table of Contents

*   [What do these scripts do and why are they useful?](#what-do-these-scripts-do-and-why-are-they-useful)
    *   [`twardoch_autorate_itunes_tracks_using_audioscrobbler.py`](#twardoch_autorate_itunes_tracks_using_audioscrobblerpy)
    *   [`twardoch_exportimport_itunes_ratings_as_popm.py`](#twardoch_exportimport_itunes_ratings_as_popmpy)
*   [Who are these scripts for?](#who-are-these-scripts-for)
*   [Installation](#installation)
    *   [Prerequisites](#prerequisites)
    *   [Dependencies](#dependencies)
    *   [Important Considerations](#important-considerations)
*   [How to Use the Scripts](#how-to-use-the-scripts)
    *   [`twardoch_autorate_itunes_tracks_using_audioscrobbler.py`](#usage-twardoch_autorate_itunes_tracks_using_audioscrobblerpy)
    *   [`twardoch_exportimport_itunes_ratings_as_popm.py`](#usage-twardoch_exportimport_itunes_ratings_as_popmpy)
*   [Technical Details](#technical-details)
    *   [`twardoch_autorate_itunes_tracks_using_audioscrobbler.py` - Technical](#technical-twardoch_autorate_itunes_tracks_using_audioscrobblerpy)
    *   [`twardoch_exportimport_itunes_ratings_as_popm.py` - Technical](#technical-twardoch_exportimport_itunes_ratings_as_popmpy)
*   [Coding and Contribution Guidelines](#coding-and-contribution-guidelines)
    *   [License](#license)
    *   [Authors and Contributors](#authors-and-contributors)
    *   [Contributing](#contributing)

## What do these scripts do and why are they useful?

This collection includes two main Python scripts:

### <a name="twardoch_autorate_itunes_tracks_using_audioscrobblerpy"></a>`twardoch_autorate_itunes_tracks_using_audioscrobbler.py`

*   **What it does:** Automatically assigns star ratings to tracks in your iTunes library.
*   **How it works:** It identifies artists in your library, queries the Audioscrobbler (now Last.fm) service to find the most popular tracks for each artist, and then applies ratings to your tracks based on this popularity.
*   **Why it's useful:** If you have a large library with many unrated tracks, this script can save you significant time by providing a baseline rating based on general popularity. This can help you discover or rediscover good music within your own collection.

### <a name="twardoch_exportimport_itunes_ratings_as_popmpy"></a>`twardoch_exportimport_itunes_ratings_as_popm.py`

*   **What it does:** This script allows you to synchronize track ratings and play counts between your iTunes library and the metadata embedded within your MP3 files (specifically, the 'POPM' or popularimeter ID3 tag).
*   **Why it's useful:**
    *   **Backup your ratings:** Store your carefully curated iTunes ratings directly in your music files.
    *   **Portability:** If you use other music players that support POPM tags, your ratings can be visible and usable across different software.
    *   **Restore ratings:** If your iTunes library gets corrupted or you move to a new system, you can re-import your ratings from the MP3 files back into iTunes.

## Who are these scripts for?

*   iTunes users who want to automate the process of rating their music.
*   Music collectors who want to ensure their ratings are embedded in their MP3 files for backup and portability.
*   Users comfortable with running Python scripts and potentially troubleshooting minor compatibility issues due to the age of the scripts.

## Installation

These scripts are written in Python and have some external dependencies.

### Prerequisites

1.  **Python:** You'll need a Python interpreter. The scripts were originally written for Python 2.x. Running them with modern Python 3.x might require modifications.
2.  **iTunes:** A working installation of iTunes is required.

### Dependencies

1.  **`mutagen`**: Both scripts can use the `mutagen` library to interact with MP3 ID3 tags.
    ```bash
    pip install mutagen
    ```
2.  **Platform-Specific Dependencies:**
    *   **For Windows Users:**
        *   The scripts use Windows COM automation to interact with iTunes. You'll need the `pywin32` extensions.
            ```bash
            pip install pywin32
            ```
    *   **For macOS Users (for `twardoch_exportimport_itunes_ratings_as_popm.py`):**
        *   This script uses the `appscript` package to communicate with iTunes via AppleScript. The original documentation mentions installing it from `http://appscript.sourceforge.net/`. Availability and installation for modern macOS might require research and may not work out of the box.
            ```bash
            # Example, may need adjustment or alternative
            pip install appscript
            ```

### Important Considerations

*   **Virtual Environments:** It's highly recommended to use a Python virtual environment (e.g., `venv`) to manage dependencies for these scripts, especially if you're adapting them.
*   **Version Compatibility:** Given the age of the scripts (circa 2006), you might encounter issues with the latest versions of Python or the libraries. You may need to find older versions of libraries or update the script code.
*   **Audioscrobbler/Last.fm API:** The `twardoch_autorate_itunes_tracks_using_audioscrobbler.py` script uses a very old Audioscrobbler API endpoint. This will likely require updating to the current Last.fm API, which involves obtaining an API key.

## How to Use the Scripts

The scripts are designed to be run directly from the command line. Their primary behavior is often embedded in the main execution block of each script, which you might need to modify.

### <a name="usage-twardoch_autorate_itunes_tracks_using_audioscrobblerpy"></a>`twardoch_autorate_itunes_tracks_using_audioscrobbler.py`

*   **Functionality:** Assigns ratings to iTunes tracks based on Audioscrobbler/Last.fm data.
*   **Platform:** Primarily Windows-only due to its reliance on Windows COM to interact with iTunes. The script notes `ituneslib.py` as a potential (unimplemented) path for macOS compatibility.
*   **Usage (Command Line):**
    ```bash
    python twardoch_autorate_itunes_tracks_using_audioscrobbler.py
    ```
    By default, the script is configured to update ratings for *unrated* tracks. You can modify the script (lines `it.getRatingsForUnratedTracks()` or `it.getRatingsForAllTracks()`) to rate all tracks.
*   **Programmatic Usage:**
    ```python
    from twardoch_autorate_itunes_tracks_using_audioscrobbler import iTunesAutoRating

    auto_rater = iTunesAutoRating(displayprogress=True)
    # For unrated tracks (default behavior in script)
    auto_rater.getRatingsForUnratedTracks()
    # Or, for ALL tracks (first N if count specified)
    # auto_rater.getRatingsForAllTracks(count=None)
    # To find top tracks missing from your library
    # auto_rater.findMissingTopTracks("missing_top_tracks.txt")
    ```

### <a name="usage-twardoch_exportimport_itunes_ratings_as_popmpy"></a>`twardoch_exportimport_itunes_ratings_as_popm.py`

*   **Functionality:** Exports iTunes track ratings and play counts to POPM tags in MP3 files, or imports them from MP3 files into the iTunes library.
*   **Platform:** Supports both Windows (via COM) and macOS (via AppleScript, if `appscript` works).
*   **Usage (Command Line):**
    The script needs to be edited to choose between exporting and importing.
    ```bash
    python twardoch_exportimport_itunes_ratings_as_popm.py
    ```
    By default, the script is configured to *import* ratings from MP3s to iTunes. To switch to export mode, you need to comment the line `itr.ImportRatingsForAlliTunesTracks()` and uncomment `itr.ExportRatingsForAlliTunesTracks()` at the end of the script.
*   **Programmatic Usage:**
    ```python
    from twardoch_exportimport_itunes_ratings_as_popm import iTunesRatings

    ratings_manager = iTunesRatings(displayprogress=True)
    # To export all iTunes library ratings into MP3 files:
    # ratings_manager.ExportRatingsForAlliTunesTracks()
    # To import ratings from MP3 files into the iTunes library (default in script):
    ratings_manager.ImportRatingsForAlliTunesTracks()
    ```

## Technical Details

This section provides a more in-depth look at how each script functions.

### <a name="technical-twardoch_autorate_itunes_tracks_using_audioscrobblerpy"></a>`twardoch_autorate_itunes_tracks_using_audioscrobbler.py`

*   **Core Functionality:** Iterates artists in iTunes, queries Audioscrobbler API for top tracks, assigns ratings locally, and optionally writes POPM ID3 tags using `mutagen`.
*   **Key Classes:**
    *   `AudioScrobblerLookup`: Handles Audioscrobbler API queries (uses `http://ws.audioscrobbler.com/1.0/artist/.../toptracks.xml` - **likely needs update to modern Last.fm API**). Parses XML track data.
    *   `ArtistTopTracks`: Retrieves top tracks for an artist and assigns ratings based on rank. The ratings are on a 20-100 scale, corresponding to 1-5 iTunes stars:
        *   Top 3 tracks: Rating 100 (iTunes *****)
        *   Tracks 4-10: Rating 80 (iTunes ****)
        *   Tracks up to 50% of list: Rating 60 (iTunes ***)
        *   Remaining tracks in list: Rating 40 (iTunes **)
        *   Tracks not found in Audioscrobbler list receive a base rating of 20 (iTunes *) if processed.
    *   `ArtistsTopTracks`: Manages `ArtistTopTracks` instances, caching results. Provides `getArtistTrackRating` which defaults to rating 20 (1 star) if a track isn't in the fetched popular list.
    *   `iTunesAutoRating`: Main class. Uses `win32com.client` for iTunes on Windows. Methods include `getRatingsForTrack`, `getRatingsForAllTracks`, `getRatingsForUnratedTracks`, `findMissingTopTracks`.
*   **`mutagen` Integration:** If available, writes rating and play count to `POPM:itunesrating@apple.com` tag in MP3s.

### <a name="technical-twardoch_exportimport_itunes_ratings_as_popmpy"></a>`twardoch_exportimport_itunes_ratings_as_popm.py`

*   **Core Functionality:** Synchronizes ratings and play counts between iTunes and MP3 POPM tags.
*   **Key Class:** `iTunesRatings`
    *   **iTunes Interaction:**
        *   Windows: `win32com.client`.
        *   macOS: `appscript` library (may require updates/alternatives).
    *   **POPM Tag Handling (`mutagen`):** Reads/writes `POPM:itunesrating@apple.com` tag. `ReadPOPMFromFile` and `WritePOPMToFile` handle file I/O.
    *   **Synchronization:**
        *   `ImportRatingsForAlliTunesTracks()`: Updates iTunes tracks with rating 0 from POPM tags.
        *   `ExportRatingsForAlliTunesTracks()`: Writes iTunes ratings/play counts to POPM tags.
    *   **Rating Scale:** Uses iTunes 0-100 scale for POPM tag values (POPM itself supports 0-255).
    *   **File Types:** Processes only `.mp3` files.

## Coding and Contribution Guidelines

### License

This project is licensed under the **Apache License, Version 2.0**. See the `LICENSE` file.

### Authors and Contributors

*   Copyright holders: `AUTHORS` file.
*   Contributors: `CONTRIBUTORS` file.

### Contributing

Contributions to modernize, fix, or enhance these scripts are welcome! Given their age, they are prime candidates for updates.

**Potential Areas for Contribution:**

1.  **Modernization:**
    *   **Python 3 Compatibility:** Full Python 3.x support.
    *   **Dependency Updates:** Compatibility with current `mutagen`, `pywin32`. For macOS, investigate `appscript` viability or alternatives like `pyobjc`'s ScriptingBridge.
    *   **Last.fm API Update:** Modify `twardoch_autorate_itunes_tracks_using_audioscrobbler.py` to use the current Last.fm API (requires API key registration).
2.  **Cross-Platform `twardoch_autorate_itunes_tracks_using_audioscrobbler.py`:** Enable macOS support.
3.  **Error Handling & Robustness:** Improve error handling (network, file access, API issues) and add logging.
4.  **User Experience:**
    *   Implement command-line arguments (e.g., `argparse`) to replace script editing for options.
    *   Improve user feedback during execution.
5.  **Code Quality:** Refactor for readability (PEP 8), add comments.
6.  **Testing:** Develop unit/integration tests (mocking iTunes/API interactions).
7.  **Documentation:** Keep this README updated.

**How to Contribute:**

*   Fork the repository.
*   Create a feature/bugfix branch.
*   Make and test your changes thoroughly.
*   Submit a pull request with a clear description.

By contributing, you agree that your contributions will be licensed under the Apache License, Version 2.0.

</document_content>
</document>

<document index="7">
<source>TODO.md</source>
<document_content>
# TODO List for iTunes Scripts Modernization

## Phase 1: Foundation Setup

- [ ] Create modern Python package structure with src/ layout
- [ ] Set up pyproject.toml with Poetry or setuptools
- [ ] Add requirements.txt and requirements-dev.txt
- [ ] Configure .gitignore for Python projects
- [ ] Set up pre-commit hooks (black, ruff, mypy)
- [ ] Create GitHub Actions workflow for CI/CD
- [ ] Add Python 3.8+ compatibility
- [ ] Set up logging framework
- [ ] Create basic CLI structure with Click/Typer

## Phase 2: Core Refactoring

- [ ] Create abstract base class for music library interface
- [ ] Implement Windows platform adapter using pywin32
- [ ] Implement macOS platform adapter (research Music.app API)
- [ ] Create Last.fm API client to replace Audioscrobbler
- [ ] Update mutagen usage to latest API
- [ ] Add proper error handling throughout
- [ ] Implement configuration management system
- [ ] Add type hints to all functions
- [ ] Create data models for Track, Artist, Album

## Phase 3: Feature Implementation

- [ ] Implement autorate command with Last.fm integration
- [ ] Implement sync-ratings command for import/export
- [ ] Add dry-run mode for all commands
- [ ] Create progress indicators for long operations
- [ ] Add filtering options (by artist, album, playlist)
- [ ] Implement rating scale configuration
- [ ] Add backup/restore functionality
- [ ] Create stats command for library analysis
- [ ] Add JSON export functionality

## Phase 4: Testing

- [ ] Set up pytest testing framework
- [ ] Write unit tests for core modules (>80% coverage)
- [ ] Create integration tests for platform adapters
- [ ] Add fixtures with sample music files
- [ ] Test Last.fm API integration with mocks
- [ ] Test ID3 tag operations
- [ ] Add performance benchmarks
- [ ] Set up continuous integration testing

## Phase 5: Documentation

- [ ] Update README.md with modern examples
- [ ] Create installation guide for each platform
- [ ] Write user documentation with Sphinx
- [ ] Add API documentation with autodoc
- [ ] Create troubleshooting guide
- [ ] Add contributing guidelines
- [ ] Write architecture overview
- [ ] Create migration guide from old scripts

## Phase 6: Distribution

- [ ] Build wheel and source distributions
- [ ] Set up automated PyPI publishing
- [ ] Create Homebrew formula for macOS
- [ ] Build Windows installer
- [ ] Add Linux package (snap/AppImage)
- [ ] Tag first beta release
- [ ] Create GitHub release with binaries
- [ ] Set up project website/docs hosting

## Future Enhancements

- [ ] Add web UI with Flask/FastAPI
- [ ] Implement plugin system
- [ ] Add support for other music services (Spotify, Apple Music)
- [ ] Create mobile companion app
- [ ] Add machine learning for recommendation
- [ ] Implement social features (share playlists)
- [ ] Add support for more audio formats
- [ ] Create visualization tools for library stats

## Maintenance Tasks

- [ ] Set up dependabot for dependency updates
- [ ] Configure security scanning
- [ ] Create issue templates
- [ ] Set up project board for tracking
- [ ] Schedule regular dependency audits
- [ ] Plan quarterly feature releases
- [ ] Monitor API deprecations
- [ ] Maintain changelog
</document_content>
</document>

# File: /Users/adam/Developer/vcs/github.twardoch/pub/twardoch-itunes-scripts/twardoch_autorate_itunes_tracks_using_audioscrobbler.py
# Language: python

import sys
import urllib
import xml.dom.minidom
from xml.dom.minidom import Node
import urllib2
import win32com.client
import mutagen.id3.ID3
import mutagen.id3.POPM

class AudioScrobblerLookup:
    """AudioScrobblerLookup() | (useHttpProxy as string)"""
    def __init__((self, useHttpProxy = None )):
    def _setProxyHandler((self, proxyurl)):
    def getArtistTopTracks((self, artistname)):

class ArtistTopTracks:
    """ArtistTopTracks(artistname as str, scrobbler as AudioScrobblerLookup)"""
    def __init__((self, name, scrobbler)):
    def _getAudioScrobblerTopTracks((self)):
    def getTopTracks((self)):

class ArtistsTopTracks:
    """ArtistsTopTracks(scrobbler as AudioScrobblerLookup)"""
    def __init__((self, scrobbler = None)):
    def getArtistTopTracks((self, artistname)):
    def getArtistTrackRating((self, artistname, tracktitle)):

class iTunesAutoRating:
    """iTunesAutoRating(displayprogress as boolean)"""
    def __init__((self, displayprogress = True)):
    def _DisplayProgress((self, i)):
    def _storeiTunesTrack((self, track)):
    def _storeiTunesTracks((self, c = None)):
    def getRatingsForTrack((self, track)):
    def getRatingsForAllTracks((self, c = None)):
    def getRatingsForUnratedTracks((self, c = None)):
    def findMissingTopTracks((self, filename)):

def __init__((self, useHttpProxy = None )):

def _setProxyHandler((self, proxyurl)):

def getArtistTopTracks((self, artistname)):

def __init__((self, name, scrobbler)):

def _getAudioScrobblerTopTracks((self)):

def getTopTracks((self)):

def __init__((self, scrobbler = None)):

def getArtistTopTracks((self, artistname)):

def getArtistTrackRating((self, artistname, tracktitle)):

def __init__((self, displayprogress = True)):

def _DisplayProgress((self, i)):

def _storeiTunesTrack((self, track)):

def _storeiTunesTracks((self, c = None)):

def getRatingsForTrack((self, track)):

def getRatingsForAllTracks((self, c = None)):

def getRatingsForUnratedTracks((self, c = None)):

def findMissingTopTracks((self, filename)):


# File: /Users/adam/Developer/vcs/github.twardoch/pub/twardoch-itunes-scripts/twardoch_exportimport_itunes_ratings_as_popm.py
# Language: python

import os
import os.path
import sys
import appscript
import macfile
import win32com.client
import mutagen.id3

class iTunesRatings:
    def __init__((self, displayprogress = True)):
    def _ResetProgress((self, all)):
    def _DisplayProgress((self, current)):
    def ReadPOPMFromFile((self, path)):
    def WritePOPMToFile((self, path, trackrating, playedcount)):
    def ReadPOPMForiTunesTrack((self, track)):
    def WritePOPMForiTunesTrack((self, track)):
    def ImportRatingsForAlliTunesTracks((self)):
    def ExportRatingsForAlliTunesTracks((self)):

def __init__((self, displayprogress = True)):

def _ResetProgress((self, all)):

def _DisplayProgress((self, current)):

def ReadPOPMFromFile((self, path)):

def WritePOPMToFile((self, path, trackrating, playedcount)):

def ReadPOPMForiTunesTrack((self, track)):

def WritePOPMForiTunesTrack((self, track)):

def ImportRatingsForAlliTunesTracks((self)):

def ExportRatingsForAlliTunesTracks((self)):


</documents>